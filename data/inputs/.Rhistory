abline(h=0,lty=2,col=2)
plot(step.modelb$fitted.values, step.modelb$residuals,ylab="resíduos",xlab="previstos")
abline(h=0,lty=2,col=2)
#load lmtest package
library(lmtest)
#perform Breusch-Pagan Test
bptest(step.model$residuals)
#perform Breusch-Pagan Test
bptest(step.modelb)
boxplot.stats(step.modelb$residuals)
summary(var.func)
coeftest(lm(step.modelb), vcov = vcovHC(lm(step.modelb), "HC1")) # HC1 dá-nos os White standard errors
#install.packages('lmtest')
#install.packages('sandwich')
library('lmtest')
library('sandwich')
coeftest(lm(step.modelb), vcov = vcovHC(lm(step.modelb), "HC1")) # HC1 dá-nos os White standard errors
diabetes.ols <- lm(glyhb ~., data = diabetes)  # Fit our model to get our residuals.
diabetes$resi <- diabetes.ols$residuals
varfunc.ols <- lm(log(resi^2) ~., data = diabetes)
summary(varfunc.ols)
diabetes$varfunc <- exp(varfunc.ols$fitted.values)
diabetes.gls <- lm(glyhb ~., weights = 1/sqrt(varfunc), data = diabetes)
install.packages("XQuartz")
install.packages("xquartz")
dataframe <- CO2
dataframe <- CO2
help(CO2)
CO2$Plant
CO2$Type
CO2$Treatment
CO2$conc
CO2$uptake
dim(CO2)
names(CO2)
#b)
dim(CO2$Treatment)
x <- 0
if CO2$Treatment = 'chilled':
x <- x +1
which CO2$Treatment = 'chilled'
CO2$Treatment = 'chilled'
CO2$Treatment == 'chilled'
df[CO2$Treatment] == 'chilled'
v1 = CO2$Treatment == 'chilled'
dim(v1)
row(v1)
CO2 [CO2$Treatment == 'chilled']
chill[CO2$Treatment == 'chilled']
CO2[CO2$Treatment == 'chilled']
CO2[CO2$Treatment == 'chilled']
count(CO2$Treatment == 'chilled')
count(CO2, CO2$Treatment == 'chilled')
#b)
chill <- CO2$Treatment ==  'chilled'
#b)
chill <- CO2$Treatment
chill
count (CO2, vars = "Treatment")
#c)
summary(CO2)
library(dplyr)
install.packages("dplyr")
quebec <- CO2$Type = 'Quebec'
quebec <- Null
quebec <- None
quebec <- 0
quebec <- CO2$Type = 'Quebec'
#c)
summary(CO2)
for x in CO2$Type{
if (x = 'Quebec'){
append(quebec1,x)
}
}
if (x = 'Quebec'){
append(quebec1,x)
}
for x in CO2$Type{
if (x = 'Quebec'){
append(quebec1,x)
}
}
for x in CO2$Type{
if (x = 'Quebec'){
append(quebec1,x)
}
}
for x in CO2$Type{if (x = 'Quebec'){append(quebec1,x) }}
for x in CO2$Type{if (x = 'Quebec'){append(quebec1, x) }}
subdata = subset(CO2, Type == 'Quebec')
matriz = as.matrix(CO2[c("conc","uptake")])
colnames(matriz) = c("concent", "consumo")
rownames(matriz) = CO2$Plant
#e)
mat[which(rownames(mat)=="Mc3")]
#e)
mat[which(rownames(matriz)=="Mc3")]
#e)
mat[which(rownames(matriz)=="Mc3"),]
#e)
matriz[which(rownames(matriz)=="Mc3")]
#f)
v = matriz[,2]
View(matriz)
View(matriz)
print(v)
#g)
CO2$uptake[CO2$Plant =="Qc3" & CO2$conc == 675]*1000
aprox1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#data set usado: mpg
mpg
x <- 2
f <- function(x, y) x + y
x %>% f(7)
f1 <- function(x1,y1,z1) x1/y1 + z1
x1 <- 1
f1 <- function(x1,y1,z1) x1/y1 + z1
x1 %>% f1(1)
x1 %>% f1(1,1)
x %>% f(7)
x1 <- 2
f1 <- function(x1,y1,z1) x1/y1 + z1
x1 %>% f1(1,1)
x1 %>% f1(1,2)
mpg %>% names
summary(mpg)
mpg %>% model
mpg
print(mpg)
mpg %>% model
mpg %>% model
print('ola)
print('ola')
library(tidyverse)
#data set usado: mpg
mpg
x <- 2
f <- function(x, y) x + y
x %>% f(7)
mpg %>% select(year, cyl, cty, hwy, drv, fl)
mpg %>% select(year, cyl, cty, hwy, drv, fl) %>% filter(cyl == 6)
t
mpg %>% select(year, cyl, cty, hwy, drv, fl) %>% filter(cyl == 6)
mpg %>% select(year, cyl, cty, hwy, drv, fl) %>% filter(cyl == 6) %>% arrange(cty)
mpg %>% group_by(fl, cyl) %>% summarize(media = mean(hwy), contagem = n(), .groups = "keep")
wine_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
wine_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
wine = read_delim(wine_url, delim=";")
wine = read_delim(wine_url, delim=";")
wine %>% summary
wine %>% pivot_longer(cols = everything()) %>% group_by(name) %>% summarise_all(lst(min, mean, median, max))
wine %>% pivot_longer(cols = everything()) %>% group_by(name) %>% summarise_all(lst(min, mean, median, max))
n
wine = read_delim(wine_url, delim=";")
wine %>% pivot_longer(cols = everything()) %>% group_by(name) %>% summarise_all(lst(min, mean, median, max))
#a)
dataframe <- CO2
#b)
chill <- CO2$Treatment
chill
count (CO2, vars = "Treatment")
#c) #criar subconjunto com dados referes a um tipo "Quebec"
summary(CO2)
subdata = subset(CO2, Type == 'Quebec')
subdata_quebec = subset(CO2, Type == 'Quebec')
#d)Criar	uma	matriz	com	os	dados	de	concentração	de	CO2 e	de	uptake.	Atribua	nomes	às	linhas	e
#colunas,	 onde	 para	 as	 linhas	 é	 usada	 a	 identificação	 da	 planta	 e	 para	 as	 colunas
#as strings	“concent”	e	“consumo”
matriz= as.matrix(CO2[c("conc","uptake")])
print(matriz)
colnames(matriz) = c("concent", "consumo") #renomear os nomes
print(matriz)
rownames(matriz) = CO2$Plant
print(matriz)
#e) selecione	 todos	 os	 valores	 de	 concentração	e consumo	referentes	à	planta	com	identificação	Mc3
matriz[which(rownames(matriz) == 'Mc3'])
#e) selecione	 todos	 os	 valores	 de	 concentração	e consumo	referentes	à	planta	com	identificação	Mc3
matriz[which(rownames(matriz) == 'Mc3')]
matriz_cc <- matriz[which(rownames(matriz)=="Mc3")]
print(matriz_cc)
matriz_cc <- matriz[which(rownames(matriz)=="Mc3"),]
print(matriz_cc)
#f) Crie	um	vetor	com	os	valores	de	consumo,	a	partir	da	matriz	criada	em	d)
matriz_consumo <- matriz[which(colnames(matriz)=='consumo',]
#f) Crie	um	vetor	com	os	valores	de	consumo,	a	partir	da	matriz	criada	em	d)
matriz_consumo <- matriz[which(colnames(matriz)=='consumo'),]
matriz_consumo
#f) Crie	um	vetor	com	os	valores	de	consumo,	a	partir	da	matriz	criada	em	d)
matriz
matriz_consumo <- matriz[which(colnames(matriz)=='consumo'),]
matriz_consumo
matriz_consumo <- matriz[which(colnames(matriz)=='consumo')]
matriz_consumo
matriz_consumo
#f) Crie	um	vetor	com	os	valores	de	consumo,	a	partir	da	matriz	criada	em	d)
f <- matriz[,2]
orint(f)
print(f)
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
CO2$conc
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz[which(CO2$conc) == 675]
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz[which((CO2$conc) == 675)]
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz[which((CO2$conc) == 675),]
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz[which((CO2$conc) == 675), & CO2$Plant == 'Qc3'),]
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz[which((CO2$conc) == 675) & CO2$Plant == 'Qc3'),]
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz[which((CO2$conc) == 675) & (CO2$Plant == 'Qc3')),]
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz[which(CO2$conc == 675 & CO2$Plant == 'Qc3'),]
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz[which(CO2$conc == 675 & CO2$Plant == 'Qc3'),]  * 1000
#g)Se	tivesse	um	campo	com	1000	plantas	do	tipo	Qc3 sujeitas	a	uma	concentração	constante	de
# 675	mL/L,	qual seria o	consumo	de	CO2?
matriz
matriz[which(CO2$concent == 675 & CO2$Plant == 'Qc3'),]  * 1000
matriz[which(CO2$concent == 675 & CO2$Plant == 'Qc3'),]
CO2$uptake[CO2$Plant =="Qc3" & CO2$conc == 675]*1000
CO2$uptake[CO2$Plant =="Qc3" & CO2$conc == 675]
CO2$uptake[CO2$Plant =="Qc3" & CO2$conc == 675] * 1000
aprox1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
#h)Em	 que	 condições	 o	 consumo	 de	 CO2 é	 o	 mais	 elevado?	 Como	 faria	 para	 obter	 o	 valor	 de
# consumo	mais	elevado	para	cada	uma	das	regiões?
CO2[which(CO2$conc == max(CO2$conc))]
#h)Em	 que	 condições	 o	 consumo	 de	 CO2 é	 o	 mais	 elevado?	 Como	 faria	 para	 obter	 o	 valor	 de
# consumo	mais	elevado	para	cada	uma	das	regiões?
CO2[which(CO2$conc == max(CO2$conc)),]
reg = levels(CO2$Type)
reg
ind = which(CO2$uptake == max(CO2$uptake[CO2$Type == r]
print(ind)
ind
iwhich(CO2$uptake == max(CO2$uptake[CO2$Type == r]
which(CO2$uptake == max(CO2$uptake[CO2$Type == r]
reg = levels(CO2$Type)
reg
for(r in reg){
print(r)
print(CO2$uptake[ind])
for(r in reg){
ind = which(CO2$uptake == max(CO2$uptake[CO2$Type == r]))
print(r)
print(CO2$uptake[ind])
print('ola')
for(r in reg){
ind = which(CO2$uptake == max(CO2$uptake[CO2$Type == r]))
print(r)
print(CO2$uptake[ind])
for(r in reg){
ind = which(CO2$uptake == max(CO2$uptake[CO2$Type == r]))
print(r)
print(CO2$uptake[ind])
}
for (thing in reg){
i = which(CO2$uptake) == max(CO2$uptake)
print(i)
print(CO2$uptake[i])
}
for (thing in reg){
i = which(CO2$uptake) == max(CO2$uptake[CO2$Type == thing])
print(i)
print(CO2$uptake[i])
}
for (thing in reg){
i = which(CO2$uptake == max(CO2$uptake[CO2$Type == thing]))
print(i)
print(CO2$uptake[i])
}
print(thing)
for (thing in reg){
i = which(CO2$uptake == max(CO2$uptake[CO2$Type == thing]))
print(thing)
print(CO2$uptake[i])
}
mean(CO2$uptake[which(CO2$Type == 'Mississipi')])
mean(CO2$uptake[which(CO2$Type == 'Mississipi')],)
CO2$uptake[which(CO2$Type == 'Mississipi' & CO2$Treatment == 'chilled'))
CO2$uptake[which(CO2$Type == 'Mississipi' & CO2$Treatment == 'chilled')
CO2$uptake[which(CO2$Type == 'Mississipi' & CO2$Treatment == 'chilled')]
which(CO2$Type == 'Mississipi' & CO2$Treatment == 'chilled')
i <- which(CO2$Type == 'Mississipi' & CO2$Treatment == 'chilled')
mean(which(dataframe$Type == 'Mississipi' & dataframe$Treatment == 'chilled'))
i <- which(dataframe$Type == 'Mississipi' & dataframe$Treatment == 'chilled')
ind = which(dataframe$Type =="Mississippi" & dataframe$Treatment=="chilled")
mean(dataframe$uptake[ind])
ind
mean(dataframe$uptake[ind])
boxplot(dataframe$uptake~dataframe$Type)
compi <- c(dataframe$uptake, dataframe$conc)
boxplot(compi~dataframe$Treatment)
boxplot(dataframe$uptake~dataframe$conc, col = dataframe$Treatment)
plot(dataframe$uptake~dataframe$conc, col = dataframe$Treatment)
#l)	Criar	um	gráfico	que	mostre	a	média	da	variável	“uptake”	para	cada	tipo	de	planta.
media = tapply(dataframe$uptake, CO2$Type, mean)
plot(media~dataframe$Type)
barplot(media)
boxplot(media)
boxplot(media~dataframe$Type)
plot(media)
barplot(media)
#2 ~
#a)
chickwts
#2 ~
#a)
type(chickwts)
#b) Verifique	se	o	conjunto	de	dados	contém	valores	omissos
is.na(chickwts)
sum(is.na(chickwts))
for (feature in chickwts){
summarize(feature)
}
for (feature in chickwts){
summarise(feature)
}
for (feature in chickwts){
summary(feature)
}
for (feature in chickwts){
print(summary(feature))
}
summary(chickwts)
for (i in chickwts$feed){
print(i)
print(mean(chickwts[i]))
}
tapply(chickwts, chickwts$feed, mean)
tapply(chickwts$weight, chickwts$feed, mean)
m=median(chickwts$weight) # calcular media no weight
min(chickwts$weight)
b=c(min(chickwts$weight)-1,0.85*m,1.15*m,max(chickwts$weight))
weight_nom = cut(chickwts$weight, breaks = b, labels = c('low','medium','high'))
plot(weight_nom)
weight_nom
hist(chickwts$weight, breaks =c(101,200,300,400,500), main = 'Distribuição da variavel weight')
hist(chickwts$weight, breaks =c(150,200,300,400,500), main = 'Distribuição da variavel weight')
hist(chickwts$weight, breaks =c(100), main = 'Distribuição da variavel weight')
hist(chickwts$weight, breaks =c(100,200), main = 'Distribuição da variavel weight')
hist(chickwts$weight, breaks =c(100,200,300), main = 'Distribuição da variavel weight')
hist(chickwts$weight, breaks =c(100,200,300,400), main = 'Distribuição da variavel weight')
hist(chickwts$weight, breaks =c(100,200,300,400,500), main = 'Distribuição da variavel weight')
hist(chickwts$weight, breaks =c(250), main = 'Distribuição da variavel weight')
hist(chickwts$weight, breaks =c(100,200,300,400,500), main = 'Distribuição da variavel weight')
boxplot(chickwts$weight~chickwts$feed)
pie(weight_nom)
pie(table(weight_nom))
plot(table(weight_nom))
pie(table(weight_nom))
install.packages("QSARdata")
#3
MeltingPoint
#3
new_data <- MeltingPoint
#3
library(QSARdata)
new_data <- MeltingPoint
new_data <- data(MeltingPoint)
summary(new_data)
new_data
data(MeltingPoint)
summary(MeltingPoint)
library(QSARdata)
data(MeltingPoint)
class(MP_Data)
class(MP_Descriptors)
class(MP_Outcome)
dim(MP_Descriptors)
length(MP_Outcome)
length(MP_Data)
#b) verificar se ha valores omissos
sum(is.na(MP_Descriptors))
MP_Norm <- scale(MP_Descriptors)
MP_Norm
mean(MP_Norm)
dp(MP_Norm)
sd(MP_Norm)
gc()
MP_sort = order(MP_Outcome, decreasing = T)[1:50]
MP_top = MP_Norm[MP_sort,]
MP_top
install.packages("mboost")
data(bodyfat)
library(TH.data)
install.packages("TH.data")
library(TH.data)
data(bodyfat)
data(bodyfat)
sum(is.na(bodyfat))
bf = na.exclude(bodyfat) #mas para remover usamos na.exclude no nosso dataframe
new_data_frame <- bf[3:10]
plot(bf)
plot(new_data_frame)
pair(new_data_frame)
pairs(new_data_frame)
pairs(bf)
gc()
pairs(new_data_frame)
library(scatterplot3d)
install.packages("scatterplot3d")
scatterplot3d(BF$waistcirc, BF$hipcirc, BF$elbowbreadth)
scatterplot3d(BF$waistcirc, BF$hipcirc, BF$elbowbreadth)
library(scatterplot3d)
scatterplot3d(BF$waistcirc, BF$hipcirc, BF$elbowbreadth)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=19)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=17)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=15)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=1)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=2)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=3)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=4)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=5)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=6)
scatterplot3d(new_data_frame$waistcirc, new_data_frame$hipcirc, new_data_frame$elbowbreadth, pch=16)
plot(BF$elbowbreadth, BF$kneebreadth, cex=bf$age*0.02, pch=16)
plot(new_data_frame$elbowbreadth, new_data_frame$kneebreadth, cex=new_data_frame$age*0.02, pch=16)
plot(new_data_frame$elbowbreadth, new_data_frame$kneebreadth, cex=new_data_frame$age*0.5, pch=16)
plot(new_data_frame$elbowbreadth, new_data_frame$kneebreadth, cex=new_data_frame$age*4, pch=16)
plot(new_data_frame$elbowbreadth, new_data_frame$kneebreadth, cex=new_data_frame$age*0.01, pch=16)
plot(new_data_frame$elbowbreadth, new_data_frame$kneebreadth, cex=new_data_frame$age*0.02, pch=16)
plot(new_data_frame$elbowbreadth, new_data_frame$kneebreadth, cex=new_data_frame$age*0.02, pch=19)
plot(new_data_frame$elbowbreadth, new_data_frame$kneebreadth, cex=new_data_frame$age*0.02, pch=12)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
BiocManager::install(c("ALL"))
BiocManager::install(c("GEOquery"))
BiocManager::install(c("genefilter", "limma"))
library(ALL)
data(ALL)
gc()
library(ALL)
data(ALL)
ALL
dim(ALL)
---
title: "aula3"
author: "jdm"
date: "3/24/2022"
output: html_document
---
Aula 3
library(ALL)
```{r setup, include=FALSE}
---
title: "aula3"
author: "jdm"
date: "3/24/2022"
output: html_document
---
Aula 3
library(ALL)
data(ALL)
```{r setup, include=FALSE}
---
title: "aula3"
author: "jdm"
date: "3/24/2022"
output: html_document
---
Aula 3
library(ALL)
data(ALL)
```{r}
library(ALL)
data(ALL)
```
ALL
dim(ALL)
exp <- exprs(ALL)
dim(exp)
class(exp)
exp[1,1:5]
exp[1,1:10]
exp[1,1:15]
exp[2,1:15]
exp[0,1:15]
sampleNames(ALL)[1:5]
featureNames(ALL)[1:5]
varMetadata(ALL)
Atributos dos metadadosdas amostras
```{r}
varMetadata(ALL)
```
annotation(ALL)
females = ALL [, ALL$sex == "F"]
females
females
anyB = grep("^B", ALL$BT)
anyB
ALL[,anyB]
exp= exprs(ALL)
exp[2:3,4:5]
exp[2:3,4:5]
setwd("~/Documents/GitHub/bioinformatics-project/data/inputs")
